string standalone.TestStructures(String MergeText,String Data,String OpenDelimiter,String CloseDelimiter,String FunctionCharacter)
{
// standalone.TestStructures(MergeText, Data)
//
// TERMINOLOGY
// 	Block = {}
// 	Embedded block = Eblock example -> {{}}
// 	Sequential block = Sblock -> {}{}
// 	Function = $abc${}
// 	Operator examples: {1}+{2}, {true}&&{false}
//
// Sample Data
// 	MergeText="My name is {${PersTitle} $FIELD${Fname} ${Lname}}, ${JobTitle}.";
// 	Data={"PersTitle":"Mr.","Fname":"Marshall","Lname":"Henley","JobTitle":"Programmer"};
	MergeText = "Marshall {Henley {is {the }{best }}{man}{at }my wedding.";
	Data = "";
//
// // Defaults
OpenDelimiter = if(OpenDelimiter == "","{",OpenDelimiter);
CloseDelimiter = if(CloseDelimiter == "","}",CloseDelimiter);
FunctionCharacter = ifnull(FunctionCharacter,"$");
fd = FunctionCharacter;
//
// Variables
ResultsMap = Map();
LastDelimiterWasOpen = true;
TextCursor = 0;
Index = List();
IsArgument = false;
// SequentialIndex=0;				integer used for the sequential block index
// BlockType="";					String value containing the current block type prior to evaluation and replacement with results text.
// MapCursor=List()					a List used to find ResultsMap entries from 0 to the maximum number of sequential blocks represented as the last sequential entries in ResultsMap
// SequentialIndex=0;				index number used in a series of blocks, sequential blocks (Sblocks) - starts with 0 for first sequential block, and increases with each successive block
//
// START LOOPING TO FIND FIELDS AND PROCESS
Index.add(0);
ResultsMap.put(Index,"BLOCK");
// the lame Deluge way of creating a counted loop => a list of serialized characters, i starts a 0
counter = leftpad("1",(MergeText.Len() / 4).toLong()).replaceAll(" ","1,").toList();
for each index i in counter
{
	//defaults each loop
	SequentialIndex = 0;
	BlockType = "BLOCK";
	// search for either block{} delimiter and set vars for processing
	OpenDelimiterLocation = MergeText.mid(TextCursor).find(OpenDelimiter);
	ClosedDelimiterLocation = MergeText.mid(TextCursor).find(CloseDelimiter);
	// 
	if(OpenDelimiterLocation < 0 && ClosedDelimiterLocation < 0)
	{
		// we're done -> no delimiters found. Tack on what's left, if anything, as Sblock.
		if(TextCursor < MergeText.len())
		{
			// Output = Output + MergeText.mid(TextCursor);
		}
		break;
	}
	// Process which delimiter was found first and therefore which block type based on last delimiter found
	NewEblock = OpenDelimiterLocation < ClosedDelimiterLocation && LastDelimiterWasOpen;
	NewSblock = OpenDelimiterLocation < ClosedDelimiterLocation && !LastDelimiterWasOpen;
	EndSblock = OpenDelimiterLocation > ClosedDelimiterLocation && LastDelimiterWasOpen;
	EndEblock = OpenDelimiterLocation > ClosedDelimiterLocation && !LastDelimiterWasOpen;
	info "i=" + i;
	info MergeText.mid(TextCursor);
	info OpenDelimiter;
	info "OpenDelimiterLocation = " + OpenDelimiterLocation;
	info "ClosedDelimiterLocation = " + ClosedDelimiterLocation;
	info "NewEblock = " + NewEblock;
	info "NewSblock = " + NewSblock;
	info "EndSblock = " + EndSblock;
	info "EndEblock = " + EndEblock;
	info "LastDelimiterWasOpen = " + LastDelimiterWasOpen;
	info "---------------------";
	//
	if(NewEblock)
	{
		if(OpenDelimiterLocation > 0)
		{
			// there is some preceding text - treat as first Eblock preceding current Sblock
			Index.add(0);
			ResultsMap.put(Index,MergeText.mid(TextCursor,OpenDelimiterLocation + TextCursor));
			SequentialIndex = 1;
		}
		Index.add(SequentialIndex);
		ResultsMap.put(Index,BlockType);
		TextCursor = TextCursor + OpenDelimiterLocation + 1;
		LastDelimiterWasOpen = true;
	}
	else if(NewSblock)
	{
		if(OpenDelimiterLocation > 0)
		{
			// there is some preceding text - treat as a completed Sblock preceding current Sblock
			Index = standalone.IncrementSequentialIndex(Index).toList(",");
			ResultsMap.put(Index,MergeText.mid(TextCursor,OpenDelimiterLocation + TextCursor));
		}
		Index = standalone.IncrementSequentialIndex(Index).toList(",");
		ResultsMap.put(Index,BlockType);
		TextCursor = TextCursor + OpenDelimiterLocation + 1;
		LastDelimiterWasOpen = true;
	}
	else if(EndSblock)
	{
		BlockType = ResultsMap.get(Index);
		if(BlockType == "BLOCK")
		{
			ResultsMap.put(Index,MergeText.mid(TextCursor,ClosedDelimiterLocation + TextCursor));
		}
		TextCursor = TextCursor + ClosedDelimiterLocation + 1;
		LastDelimiterWasOpen = false;
	}
	else if(EndEblock)
	{
		// Complete Embedded blocks - process what is in Index.get( Index.size()-1 - (Index.get(Index.size()-1) ), the previous dimension
		if(ClosedDelimiterLocation > 0)
		{
			// there is some ending text - treat as a completed Sblock preceding current Sblock
			Index = standalone.IncrementSequentialIndex(Index).toList(",");
			ResultsMap.put(Index,MergeText.mid(TextCursor,ClosedDelimiterLocation + TextCursor));
		}
		ParentBlockKey = standalone.ParentBlockKey(ResultsMap);
		BlockType = standalone.ParentBlockValue(ResultsMap);
		ResultsMap.put(ParentBlockKey,"");
		Indices = standalone.ParentSubIndices(ResultsMap).toList(",");
		info "Indices=" + Indices;
		if(BlockType = "BLOCK")
		{
			// iterate through concatenation of each sub block
			for each index i in Indices
			{
				ResultsMap.put(ParentBlockKey,ResultsMap.get(ParentBlockKey) + ResultsMap.get(i));
			}
		}
		TextCursor = TextCursor + ClosedDelimiterLocation + 1;
		LastDelimiterWasOpen = false;
	}
}
return ResultsMap.get(Index);
}