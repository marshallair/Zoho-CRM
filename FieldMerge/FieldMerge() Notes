Current approach:

Blocks (items enclosed in {} ) are tracked using a map, ResultsMap. A two dimensional structure is needed to track where we are in processing, because Blocks
can be embedded ad infinitum and we can't use recursion. The structure is encoded in a list in the form of {x1,x2,x3,...,xn} where x is the sequential dimension (blocks in a row),
and the number of dimensions n is the number of embeds for the current data. This structure is, in turn, used as the key map index in ResultsMap.

The list index is problematic because a) it is treated as a pointer or relative reference within Deluge. This is probably not planned behavior, but there might be a way to take advantage of it
almost like passing parameters by reference. Basically, if you have a map, m, and do the following, you get the following results:
ListVar=List();
ListVar.add(0);
m.put(ListVar,"ITEM1");
>> m is {[0]:"ITEM1"}, then you do...
List.add(1);
m.put(ListVar,"ITEM2");
>> m is now {[0,1]:"ITEM1",[0,1]:"ITEM2"}... note that first index changed

To alleviate, you have to change the put functions to...
m.put(ListVar.duplicate()...)

However, in some instances (apparently haphazardly), the duplicate() function changes the values to strings, such as ["0","1"]. To avoid this,
the following seems to work... .duplicate().toList().

To track where we are within processing, we detect open and closed curly braces, and decide whether they follow an previous open or closed brace
(the MergeText field is defaulted to have a curly brace to open and close it during processing):
	- If { is preceded by {, then add a dimension of value 0 (add an element 0 to Index and use new Index to create a new ResultsMap entry)
	- If { is preceded by }, then increment the value of the dimension (xn=xn+1) and assign that value to a new ResultsMap entry.
	- If } is preceded by {, then process what is in the MapResults contained at current Index value
	- If } is preceded by }, then, process what is in MapResults contained at the Index value one dimension less than the current value. This provides
		for processing of functions with arguments, or even blocks containing expressioins, because each of the previous elements at dimension n-1 are stored in
		ResultsMap at dimension n, or n:x, (Index y1,y2,yn-1,x), where x for each Map pair index value is a different value. These can easily be processed in order,
		and the default operation is simple concatenation.

Loop for blocks, process opening of blocks for functions, then pre-load stack with function name then function arguments
For closing blocks, check for function arguments and process as directed

All list entries have a prefix, like PREFIX|: where the |: is ignored, but forms a delimiter

Order of development and testing:
x	BLOCK {}
x	DON'T FORGET TO TEST FOR ESCAPED CHARACTERS EVERYWHERE!!!
x	Refactor for BlockProcess variable = 1...4
x	SequentialBlockCount() function to count the number of sequential blocks in the current cursor area should be created. 
	FIX BlockCount() function that is miscounting - it counts the total number of blocks in the current block should be created. 
x	BlockDepth() function that counts the total number of embedded block levels in the current cursor area should be created. 
	RTF: Need to do some experimentation with Rich text multi-line Fields versus other multi-line fields and see how the data is stored. Questions to be answered would
		be if I use a rich text multiline field with field merge codes, does that need to get merged into the rich text multiple. Or, could I use a\
		rich little text multiline field into the regular field but the rich text would be maintained as Rich text codes. Either way would be good to know.
		Other than size is there a difference between the 3,000 character multi-line field in the 50,000 character multi-line field.
x	Fix EscapeCharacters() on return - double-check the use of true in replaceAll functions - this should likely be TRUE in every case.
x	ReplaceEscapedCharacters() function created to allow escaped characters and the \ to be ignored, by either replacing with "__" or a user-specified replacement, including nothing.
	Inside loop, refactor code with:
		PreprocessBlock(MergeText,StartLocation,Index) function returning a map with, for an example IF block at current Index [0,1,3], the following would be returned:
		{"blocktype":"IF_RESULT","preload_blocks":{[0,1,3,0]:"IF_COND",[0,1,3,1],[0,1,3,2]:"IF_TRUE",[0,1,3,3]:"IF_FALSE"}} to pre-load next set of processing
			-	Functions that require embedded arguments or map arguments are totally allowable. Maps would be indicated by blocks with a function name of block or something like that. 
			-	When an open parenthesis is found, run a function that automatically looks for the field type and then adds as necessary the field components with identifiers in the map
			-	When an open an open parentheses is found, as part of the function that automatically looks for a field type, check and see if an index for a the new block already exists.
				If so, then look at the field code and decide whether anything needs done. If nothing needs done, leave the field block there. This probably means it's just containing a default. 
			-	When a close parentheses is found for a function or operator, go through the indicated blocks for the function one by one in code. 
			-	For functions with specified numbers of blocks, the blocks must be preloaded with either defaults or field codes. The additional field should programmatically be ignored if there
				are more than the parameters for that particular function require.
				For example, if an IF function contains more than three parameters, then ignore all parameters after the third. This will stop from wasting processing.
			-	For functions with unlimited numbers of arguments, such as a and or or function, no special treatment is needed. The blocks will automatically be added as the new parameters are located.
			-	Some functions like if, or the field function, will require processing and a decision to ignore some or all blocks. This will need either a jump to next block or some other type of function.

		PostProcessBlock(MergeText,StartLocation,Index) function that evaluates the ResultsMap, as in ProcessFunc(BlockType,ResultsMap,Index)
			-	Create a function that processes the end of a block when it close parentheses is found.
				This will look at the block code and determine what to do with the information found within the blocks contained by the block.
			-	Treat operators like functions that simply use the previous block as an argument. Perhaps one function could be written that handles all operators this way. 
			-	All functions and operators will need to specify allowable data types from input parameter blocks. If these are not missing, they will need to be spelled out they do.
			-	
	FIELD ${} or $FIELD${}
		just field name (Sblock1), auto assign next two blocks to {$} and "" before finding out if they contain values
		with EVAL_IF_NOT_NULL_OR_ERROR block (missing or Sblock2)- can use just {$} for field value {$$} for field name or {$$$} for field value preceded with label, colon, and space => FieldName: FieldValue
		with EVAL_IF_NULL_OR_ERROR block (missing or Sblock3)
	AND{}
	OR{}
	&& operator
	|| operator
	+ operator
	-- unary negative operator (can I do single - and detect somehow?)
	IF{}
	ALL functions
	ALL operators
	VARDEF - define a variable (and put into a map string)
	VAR - retrieve a variable from the variable map
	Need a performance testing mechanism where the data and number of iterations is stored as well as algorithm name or something like that in either a custom module
		or a completely separate SQL database that's accessible through deluge. Call the function time stamp call another function and the timestamp calculate the length.

