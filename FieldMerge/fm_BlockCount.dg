string standalone.BlockCount(String Text,String OpenDelimiter,String CloseDelimiter)
{
// USAGE:
//  standalone.BlockCount(Text)
//  standalone.BlockCount(Text, "{", "}")
//
// NOTES:
//	BlockDepth counts the maximum depth of any embedded blocks within Text (if more than one sequential block the the deepest), ignoring the following:
//	- Embedded blocks
//	- Leading Closed delimiters
//	- trailing Open delimiters
//	- Unmatched delimiters
//
// TEST - answer should be 10
	// Text = "}}\\{{\\}}{{{}}}}}{{{{{{}}}}}}}}{{{";
//
// DEFAULTS
if(Text=="")
{
	Return 0;
}
else 
{
	if(isnull(OpenDelimiter))
	{
		OpenDelimiter = "{";
	}
	if(isnull(CloseDelimiter))
	{
		CloseDelimiter = "}";
	}
	Text = standalone.ReplaceEscapedCharacters(Text,OpenDelimiter + CloseDelimiter,"__");
	info Text;
	End = Text.len().toLong();
	Cursor = 0;
	OpenCount = 0;
	CloseCount = 0;
	counter = leftpad("1",End).replaceAll(" ","1,").toList();
	for each index i in counter
	{
		OpenDelimiterLocation = Text.mid(Cursor).find(OpenDelimiter);
		ClosedDelimiterLocation = Text.mid(Cursor).find(CloseDelimiter);
		// 
		// Process which delimiter was found first and therefore which block type based on last delimiter found
		if(OpenDelimiterLocation < 0 && ClosedDelimiterLocation < 0)
		{
			//neither found - we're done
			break;
		}
		else if(OpenDelimiterLocation < 0)
		{
			// only closed delimiter found
			Cursor = Cursor + ClosedDelimiterLocation + 1;
			CloseCount = CloseCount + 1;
		}
		else if(ClosedDelimiterLocation < 0)
		{
			// only open delimiter found
			Cursor = Cursor + OpenDelimiterLocation + 1;
			OpenCount = OpenCount + 1;
		}
		else
		{
			// both delimiters found
			if(OpenDelimiterLocation < ClosedDelimiterLocation)
			{
				Cursor = Cursor + OpenDelimiterLocation + 1;
				OpenCount = OpenCount + 1;
			}
			else
			{
				Cursor = Cursor + ClosedDelimiterLocation + 1;
				CloseCount = CloseCount + 1;
			}
		}
		if(Cursor > End)
		{
			//we're done
			break;
		}
	}
	if(CloseCount > OpenCount)
	{
		return OpenCount.toString();
	}
	else
	{
		return CloseCount.toString();
	}
}
}