string standalone.PreprocessBlock(String MergeText, String strIndex, Int BlockDelimiterLocation, String OpenDelimiter,String CloseDelimiter,String FunctionCharacter)
{
// USAGE
//  standalone.PreprocessBlock(MergeText,Index).toMap()
//
// NOTES
//  Processes Text starting from position 0 as the next block. Returns a map string that needs added to ResultsMap, with a block type always starting first, then preload blocks, such as:
//  {"blocktype":"IF_RESULT","preload_blocks":{[0,1,3,0]:"IF_COND",[0,1,3,1],[0,1,3,2]:"IF_TRUE",[0,1,3,3]:"IF_FALSE"}}
//  Care needs taken to add the blocktype block and the preload blocks to ResultsMap immediately after calling this function.
//
// TEST
MergeText = "$F${id,ID: {$},missing}";
Cursor = 3;
Index = {0,0,1};
//
// ERROR CHECKS
if(isblank(MergeText))
{
	return "MergeText is blank when passed to PreprocessBlock()";
}
if(isblank(strIndex))
{
	return "strIndex is blank when passed to PreprocessBlock()";
}
//
// DEFAULTS
if(OpenDelimiter == "")
{
	OpenDelimiter = "{";
}
if(CloseDelimiter == "")
{
	CloseDelimiter = "}";
}
if(FunctionCharacter == "")
{
	FunctionCharacter = "$";
}
// VARIABLES
m = Map();
Index = strIndex.toList();
//
// FUNCTION
// Every function and operator is evaluated. To add new operators or functions, add them here, minding their order if necessary, and call their associated standalone function.
if(standalone.IsBlockThisFunction("IF",MergeText,BlockDelimiterLocation,FunctionCharacter))
{
	// IF function
	m.putAll(standalone.fmfunc_IF(Index).toMap());
}
else if(standalone.IsBlockThisFunction("AND",MergeText,BlockDelimiterLocation,FunctionCharacter))
{
	// AND function
	m.putAll(standalone.fmfunc_AND(Index,standalone.SequentialBlockCount(MergeText.mid(BlockDelimiterLocation+1,null,null)).toLong()).toMap());
}
else if(standalone.IsBlockThisFunction("NAND",MergeText,BlockDelimiterLocation,FunctionCharacter))
{
	// NAND function
	m.putAll(standalone.fmfunc_NAND(Index).toMap());
}
else if(standalone.IsBlockThisFunction("F",MergeText,BlockDelimiterLocation,FunctionCharacter) || upper(MergeText.mid(BlockDelimiterLocation - 1,BlockDelimiterLocation)) == FunctionCharacter)
{
	m.putAll(standalone.fmfunc_FIELD(Index).toMap());
	// Field (F) function (simplified Field ${} must be evaluated last to make sure it doesn't match any other functions)
}
else
{
	// plain block {}
}
return m;
}