string standalone.fmfunc_FIELD(bool isPRE, string strResultsMap)
{
//
// NOTES
//	Load the blocks with block type and defaults
//
// TEST
//
// // ResultsMap structure used for most function interfaces
// ResultsMap = Map();
// ResultsMap.put("txt",MergeText); 				// doesn't change, string
// ResultsMap.put("data",Data);					// All the data
// ResultsMap.put("od",OpenDelimiter); 			// doesn't change, single character
// ResultsMap.put("cd",CloseDelimiter); 			// doesn't change, single character
// ResultsMap.put("fc",FunctionCharacter); 		// doesn't change, single character
// ResultsMap.put("end",MergeText.len() - 1); 		// End position, doesn't change, integer
// // these change on each parse cycle below:
// ResultsMap.put("o_loc",-1); 					// OpenDelimiterLocation integer
// ResultsMap.put("c_loc",-1); 					// ClosedDelimiterLocation integer
// ResultsMap.put("curs",0) 						// TextCursor integer
// ResultsMap.put("chunk","");						// CurrentChunk string
// ResultsMap.put("bp",0);							// BlockProcess integer
// ResultsMap.put("ind",null);						// CurrentIndex
//
// ERROR CHECKS
if(isblank(strIndex))
	{
		return "";
	}
//
// DEFAULTS
//
// VARIABLES
i = strIndex.toList();
m = Map();
//
// FUNCTION
if(isPRE)
{
	// PRE process
	m.put(i.duplicate(0).toList(),"FIELD");
	i.add(0); // embed arguments
	m.put(i.duplicate(0).toList(),"FIELD_NAME");
	i = standalone.IncrementSequentialIndex(i).toList(",");
	m.put(i.duplicate(0).toList(),"{$}");
	i = standalone.IncrementSequentialIndex(i).toList(",");
	m.put(i.duplicate(0).toList(),"");
	i = standalone.IncrementSequentialIndex(i).toList(",");
	m.put(i.duplicate(0).toList(),"");
}
else
{
	// POST process
}
	return m;
}