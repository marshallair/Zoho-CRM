string standalone.FieldMerge(string MergeText, string Data)
{
	MergeText="My name is {{Mr. }{Marshall }{Henley}}, programmer.";
	// Variables
	MergeStack=list(); // where we keep the current variable contexts of all merge info. We "push" and "pop" onto the stack with .add() and .remove(StackLevel=MergeStack.size()-1)
	StackLevel=0; // where we are in the stack - should always equal MergeStack.size(), so may not be needed
	Output = ""; //string for results
	Beg=0; // where we begin searching for next field characters
	//
	// START LOOPING TO FIND FIELDS AND PROCESS
	counter = leftpad("1",(MergeText.Len()/4).toLong()).replaceAll(" ","1,").toList(); // the lame Deluge way of creating a counted loop => a list of serialized characters
	for each index i in counter // i starts at 0 {
		// search for either field delimiter, open or closed curly braces
		StackLevel=MergeStack.size()-1;
		OpenBraceLoc=MergeText.mid(Beg).find("{");
		ClosedBraceLoc=MergeText.mid(Beg).find("}");
		if(OpenBraceLoc<0 && ClosedBraceLoc<0) // we're done {
			if(Beg<MergeText.len()) {
				MergeStack=null;
				Output=Output+MergeText.mid(Beg); // tack on what's left
			}
			break;
		}
		else if(OpenBraceLoc>ClosedBraceLoc&&i==0) {
			e={"ERROR","Braces don't match"};
			break;
		}
		//
		// The real work starts here
		else if(OpenBraceLoc>=0) {
			// We start a new block{} testing for type, starting with functions, binary, and unary operators
			if(upper(MergeText.mid(OpenBraceLoc-5,OpenBraceLoc-1))=="$AND$") { logical and
			}
			else if(upper(MergeText.mid(OpenBraceLoc-4,OpenBraceLoc-1))=="$OR$") { // logical or function
			}
			else if(upper(MergeText.mid(OpenBraceLoc-4,OpenBraceLoc-1))=="$NOR$") { // logical nor function
			}			
			else if(upper(MergeText.mid(OpenBraceLoc-4,OpenBraceLoc-1))=="$NAND$") { // logical nand function
			}
			else if(upper(MergeText.mid(OpenBraceLoc-4,OpenBraceLoc-1))=="$NOT$") { // logical unary not function
			}
			else if(MergeText.mid(OpenBraceLoc-4,OpenBraceLoc-1)=="+") { // add
			}
			else if(MergeText.mid(OpenBraceLoc-4,OpenBraceLoc-1)=="-") { // subtract
			}
			else if(MergeText.mid(OpenBraceLoc-4,OpenBraceLoc-1)=="*") { // multiply
			}
			else if(MergeText.mid(OpenBraceLoc-4,OpenBraceLoc-1)=="**") { // raise to power of
			}
			else if(MergeText.mid(OpenBraceLoc-4,OpenBraceLoc-1)=="/") { // divide
			}
			else if(MergeText.mid(OpenBraceLoc-4,OpenBraceLoc-1)=="--") { // unary negative
			}
			else if(MergeText.mid(OpenBraceLoc-4,OpenBraceLoc-1)=="&&") { // and operator
			}
			else if(MergeText.mid(OpenBraceLoc-4,OpenBraceLoc-1)=="||") { // or operator
			}
			else if(upper(MergeText.mid(OpenBraceLoc-4,OpenBraceLoc-1))=="$IIF$") { // or immediate if function
			}
			else if(upper((MergeText.mid(OpenBraceLoc-4,OpenBraceLoc-1))=="$F$")
				||(MergeText.mid(OpenBraceLoc-4,OpenBraceLoc-1))=="$") { // Data field
			}
			else {
			}
			// take what's between Beg & OpenBraceLoc-1 and add it to MergeStack at StackLevel
			// We also need to det a flag for Next
			MergeStack.add(MergeText.mid(Beg,OpenBraceLoc-1)); // PUSH
			Output=Output+MergeStack.get(MergeStack.size()-1);
			Beg=OpenBraceLoc+1;
		}
		else if(ClosedBraceLoc>=0)
		// We end a field so we update the oubput and reduce the stack {
			//evaluate what's between Beg & ClosedBraceLoc-1 and concatenate it with what in MergeStack at StackLevel, then POP it and concatenate with what's in MergeStack at StackLevel-1 
			Output=Output+MergeStack.get(StackLevel)+MergeText.mid(Beg,ClosedBraceLoc-1);
			MergeStack.remove(StackLevel); // POP
			Beg=ClosedBraceLoc+1;
		}
	}
	// END LOOP
	//
	// return function value
	if(!isnull(e))
	{
		return e;
	}
	else 
    {
		return Output;
    }
}
