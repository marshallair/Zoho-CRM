	string standalone.FieldMerge(string MergeText, string Data, string OpenDelimiter, string CloseDelimiter, string FunctionCharacter)
	{
		// Sample Data
		MergeText="My name is {${PersTitle} $FIELD${Fname} ${Lname}}, ${JobTitle}.";
		Data='{PersTitle:"Mr.",Fname:"Marshall",Lname:"Henley",JobTitle:"Programmer"}';
		// Defaults
		OpenDelimiter=ifnull(OpenDelimiter,"{");
		CloseDelimiter=ifnull(CloseDelimiter,"}");
		FunctionCharacter=ifnull(FunctionCharacter,"$");
		fd=FunctionCharacter; 																	// just keeping things short in code

		//
		// Variables
		MergeStack=list(); 																	// where we keep the current variable contexts of all merge info. We "push" and "pop" onto the stack with .add() and .remove(StackLevel=MergeStack.size()-1)
		StackLevel=0; 																			// where we are in the stack - should always equal MergeStack.size(), so may not be needed
		Output = ""; 																				// string for results
		Beg=0; 																							// where we begin searching for next field characters
		IsArgument=false;																		// boolean indicating the current pass already has a stack element associated with an argument to be processed
		//
		// START LOOPING TO FIND FIELDS AND PROCESS
		counter = leftpad("1",(MergeText.Len()/4).toLong()).replaceAll(" ","1,").toList(); 				// the lame Deluge way of creating a counted loop => a list of serialized characters, i starts a 0
		for each index i in counter {
			// search for either block{} delimiter
			StackLevel=MergeStack.size()-1;
			OpenDelimiterLoc=MergeText.mid(Beg).find(OpenDelimiter);
			ClosedDelimLoc=MergeText.mid(Beg).find(CloseDelimiter);
			if(OpenDelimiterLoc<0 && ClosedDelimLoc<0) {					// we're done -> no delimiters found
				if(Beg<MergeText.len()) {
					MergeStack=null;
					Output=Output+MergeText.mid(Beg); 						// tack on what's left
				}
				break;
			}
			else if(OpenDelimiterLoc>ClosedDelimLoc&&i==0) {			// Mismatch
				e={"ERROR","Braces don't match"};
				break;
			}
			else if(OpenDelimiterLoc>=0) { 												// Block{} found
				// TEST FOR FUNCTIONS
				Beg=OpenDelimiterLoc+1;
				if(standalone.IsBlockThisFunction("AND",MergeText,OpenDelimiterLoc,FunctionCharacter)) { 										// logical and
				}
				else if(standalone.IsBlockThisFunction("NAND",MergeText,OpenDelimiterLoc,FunctionCharacter)) { 							// logical nand function
				}
				else if(standalone.IsBlockThisFunction("OR",MergeText,OpenDelimiterLoc,FunctionCharacter)) { 								// logical or function
				}
				else if(standalone.IsBlockThisFunction("NOR",MergeText,OpenDelimiterLoc,FunctionCharacter)) { 							// logical nor function
				}			
				else if(standalone.IsBlockThisFunction("XOR",MergeText,OpenDelimiterLoc,FunctionCharacter)) { 							// logical Xor function
				}			
				else if(standalone.IsBlockThisFunction("NOT",MergeText,OpenDelimiterLoc,FunctionCharacter)) { 							// logical unary not function
				}
				// TEST FOR BINARY and UNARY OPERATORS
				else if(standalone.IsBlockThisFunction("+",MergeText,OpenDelimiterLoc,"")) { // add operator
				}
				else if(standalone.IsBlockThisFunction("-",MergeText,OpenDelimiterLoc,"")) { // subtract
				}
				else if(standalone.IsBlockThisFunction("*",MergeText,OpenDelimiterLoc,"")) { // multiply
				}
				else if(standalone.IsBlockThisFunction("**",MergeText,OpenDelimiterLoc,"")) { // raise to power of
				}
				else if(standalone.IsBlockThisFunction("/",MergeText,OpenDelimiterLoc,"")) { // divide
				}
				else if(standalone.IsBlockThisFunction("--",MergeText,OpenDelimiterLoc,"")) { // unary negative
				}
				else if(standalone.IsBlockThisFunction("&&",MergeText,OpenDelimiterLoc,"")) { // and operator
				}
				else if(standalone.IsBlockThisFunction("||",MergeText,OpenDelimiterLoc,"")) { // or operator
				}
				else if(standalone.IsBlockThisFunction("IIF",MergeText,OpenDelimiterLoc,FunctionCharacter)||standalone.IsBlockThisFunction("IF",MergeText,OpenDelimiterLoc,FunctionCharacter)) { 	// or immediate if function
				}
				else if(standalone.IsBlockThisFunction("F",MergeText,OpenDelimiterLoc,FunctionCharacter)||(MergeText.mid(OpenDelimiterLoc-1,OpenDelimiterLoc)==fd)) { 								// data field
					MergeStack.add("FLD");
					MergeStack.add("FIELDNAME");
					IsArgument=true;
				}
				else {
					MergeStack.add("BLOCK");
				}
				// take what's between Beg & OpenDelimiterLoc-1 and add it to MergeStack at StackLevel
				// We also need to det a flag for Next
				MergeStack.add(MergeText.mid(Beg,OpenDelimiterLoc-1)); // PUSH
				Output=Output+MergeStack.get(MergeStack.size()-1);
			
			}
			else if(ClosedDelimLoc>=0) {											// Block{} end found
				ArgType=MergeStack.get(StackLevel);
				if(IsArgument) {
					if(ArgType=="FIELDNAME") {

					}
					}
				}
				else {
					if(ArgType=="FIELD") {

					}
					else if(ArgType=="BLOCK") {
						MergeStack.
					}
					Output=Output+MergeStack.get(StackLevel)+MergeText.mid(Beg,ClosedDelimLoc-1);
				}
				MergeStack.remove(StackLevel); // POP
				Beg=ClosedDelimLoc+1;
			}
		}
		// END LOOP
		//
		// return function value
		if(!isnull(e))
		{
			return e;
		}
		else 
			{
			return Output;
			}
	}
