string standalone.FieldMerge(String MergeText,String Data,String OpenDelimiter,String CloseDelimiter,String FunctionCharacter)
{
// USAGE:
//	standalone.FieldMerge(MergeText,Data,null,null,null)
//	standalone.FieldMerge(MergeText,Data,OpenDelimiter,CloseDelimiter,FunctionCharacter)
//  NOTE: MergeText requires double escapes (\\) for delimiters (e.g. \\{ ) and function character (e.g \\$) if trying to use as literal
// 		characters, AND if Zoho has turned on \n for your instance of CRM. Not needed if you haven't requested \n to be turned on.
//		The reason for this is that Deluge with escaped strings turned on only recognizes \\, \t, \n, \", and \'//
// TEST:
//	MergeText="My name is {${PersTitle} $FIELD${Fname} ${Lname}}, ${JobTitle}.";
//	Data={"PersTitle":"Mr.","Fname":"Marshall","Lname":"Henley","JobTitle":"Programmer"};
// 	MergeText = "Marshall {Henley {is the best man }}at my wedding.";
MergeText = "Marsh\\}all {Henley {is {the }}{b{e}{s}{t} }\\$}{man\\{ }at my {wedding}.";
//	MergeText = "Marshall Henley {is the }{best}";
Data = "";
//
// DEFAULTS:
if(OpenDelimiter=="")
{
	OpenDelimiter="{";
}
if(CloseDelimiter=="")
{
	CloseDelimiter="}";
}
if(FunctionCharacter=="")
{
	FunctionCharacter="$";
}
//
// FUNCTION:
// Variables
MergeText = OpenDelimiter + MergeText + CloseDelimiter;
// info "MergeText: " + MergeText;
ResultsMap = Map();
LastDelimiterWasOpen = true;
TextCursor = 0;
CurrentIndex = List();
IsArgument = false;
End = MergeText.len() - 1;
ResultText = "";
NewEblock = 1;
NewSblock = 2;
EndSblock = 3;
EndEblock = 4;
// BlockProcess=1;
//
//
// START LOOPING TO FIND FIELDS AND PROCESS (lame way of doing while loops in Deluge - must break to exit)
counter = leftpad("1",MergeText.Len().toLong()).replaceAll(" ","1,").toList();
for each index i in counter
{
	// Use replaceall to ignore escaped delimiters
	Temp = MergeText.mid(TextCursor).replaceAll('\' + OpenDelimiter,"__",true).replaceAll('\' + CloseDelimiter,"__",true);
	OpenDelimiterLocation = Temp.find(OpenDelimiter);
	ClosedDelimiterLocation = Temp.find(CloseDelimiter);
	//
	// info "Pass(i): " + i + " of " + End + " , TextCursor: " + TextCursor + " , OpenDelimiterLocation: " + OpenDelimiterLocation + " , ClosedDelimiterLocation: " + ClosedDelimiterLocation;
	// info "Text from TextCursor to end: " + MergeText.mid(TextCursor);
	// 
	// Process which delimiter was found first and therefore which block type based on last delimiter found
	if(OpenDelimiterLocation < 0 && ClosedDelimiterLocation < 0)
	{
		// THIS SHOULD NEVER HAPPEN DUE TO MergeText=OpenDelimiter+MergeText+CloseDelimiter above
		// info "BREAKING ON DELIMITER NOT FOUND - THIS SHOULD NEVER HAPPEN";
		break;
	}
	else if(OpenDelimiterLocation < 0)
	{
		// only closed delimiter found
		BlockProcess = if(LastDelimiterWasOpen,3,4);
	}
	else if(ClosedDelimiterLocation < 0)
	{
		// only open delimiter found
		BlockProcess = if(LastDelimiterWasOpen,1,2);
	}
	else
	{
		// both delimiters found
		BlockProcess = if(OpenDelimiterLocation < ClosedDelimiterLocation && LastDelimiterWasOpen,1,if(OpenDelimiterLocation < ClosedDelimiterLocation && !LastDelimiterWasOpen,2,if(OpenDelimiterLocation > ClosedDelimiterLocation && LastDelimiterWasOpen,3,if(OpenDelimiterLocation > ClosedDelimiterLocation && !LastDelimiterWasOpen,4,null))));
	}
	info "BlockProcess: " + if(BlockProcess == 1,"NewEblock",if(BlockProcess == 2,"NewSblock",if(BlockProcess == 3,"EndSblock",if(BlockProcess == 4,"EndEblock","ERROR IN BlockProcess (not equal to 1,2,3 or 4)")))) + " , OpenDelimiterLocation: " + OpenDelimiterLocation + " , ClosedDelimiterLocation: " + ClosedDelimiterLocation;
	//
	if(BlockProcess == NewEblock)
	{
		//default for each new block
		BlockType = "BLOCK";
		//>>>>>>>>>>>>>>>>>>>>>TEST FOR FUNCTIONS AND OPERATORS		
		if(OpenDelimiterLocation > 0)
		{
			// there is some preceding text - add new level to CurrentIndex, place text there, then make next block sequential
			CurrentIndex.add(0);
			// NOTE: Deluge maps with an a list used as key value(s) apparently use an internal pointer or something. We have to "clone" the list to use it using duplicate().
			// Otherwise, it changes the map variable when we change the value of CurrentIndex! Also, without using toList() with this function, occasionally the new index
			// elements are converted to strings (another bug), such as ["0","1"] instead of [0,1], for example. Therefore, we always use listvar.duplicate(0).toList() 
			// when assigning a list to a map key...
			//
			// Add preprocess key-value pairs to map
			// ResultsMap.putAll(PreprocessBlock(BlockProcess, MergeText,TextCursor-1,CurrentIndex,null,null,null).toMap());
			ResultsMap.put(CurrentIndex.duplicate(0).toList(),MergeText.mid(TextCursor,OpenDelimiterLocation + TextCursor));
			CurrentIndex = standalone.IncrementSequentialIndex(CurrentIndex).toList(",");
			ResultsMap.put(CurrentIndex.duplicate(0).toList().toList(),BlockType);
			TextCursor = TextCursor + OpenDelimiterLocation + 1;
		}
		else
		{
			// just add a new level to CurrentIndex
			CurrentIndex.add(0);
			// Add preprocess key-value pairs to map
			// ResultsMap.putAll(PreprocessBlock(BlockProcess, MergeText,TextCursor-1,CurrentIndex,null,null,null).toMap());
			ResultsMap.put(CurrentIndex.duplicate(0).toList(),BlockType);
			TextCursor = TextCursor + 1;
		}
		LastDelimiterWasOpen = true;
	}
	else if(BlockProcess == NewSblock)
	{
		//default for each new block
		BlockType = "BLOCK";
		if(OpenDelimiterLocation > 0)
		{
			// there is some preceding text - treat as a completed Sblock preceding current Sblock
			CurrentIndex = standalone.IncrementSequentialIndex(CurrentIndex).toList(",");
			ResultsMap.put(CurrentIndex.duplicate(0).toList(),MergeText.mid(TextCursor,OpenDelimiterLocation + TextCursor));
		}
		TextCursor = TextCursor + OpenDelimiterLocation + 1;
		CurrentIndex = standalone.IncrementSequentialIndex(CurrentIndex).toList(",");
		// Add preprocess key-value pairs to map
		// ResultsMap.putAll(PreprocessBlock(BlockProcess, MergeText,TextCursor-1,CurrentIndex,null,null,null).toMap());
		ResultsMap.put(CurrentIndex.duplicate(0).toList(),BlockType);
		LastDelimiterWasOpen = true;
	}
	else if(BlockProcess == EndSblock)
	{
		// info "START EndSblock processing -------------";
		// info ResultsMap;
		// info "CurrentIndex = " + CurrentIndex.toList();
		// BlockType = ResultsMap.get(CurrentIndex.toList());
		// info "BlockType = " + BlockType;
		// info "ResultsMap.get(CurrentIndex) = " + ResultsMap.get(CurrentIndex.toList());
		if(BlockType == "BLOCK")
		{
			info "MergeText.mid(TextCursor,ClosedDelimiterLocation + TextCursor) = " + MergeText.mid(TextCursor,ClosedDelimiterLocation + TextCursor);
			ResultsMap.put(CurrentIndex.duplicate(0).toList(),MergeText.mid(TextCursor,ClosedDelimiterLocation + TextCursor));
		}
		TextCursor = TextCursor + ClosedDelimiterLocation + 1;
		LastDelimiterWasOpen = false;
		// info "END EndSblock processing -------------";
	}
	else if(BlockProcess == EndEblock)
	{
		// Complete Embedded blocks - process what is in CurrentIndex.get( CurrentIndex.size()-1 - (CurrentIndex.get(CurrentIndex.size()-1) ), the previous dimension
		if(ClosedDelimiterLocation > 0)
		{
			// there is some ending text - treat as a completed Sblock preceding current Sblock
			info "THERE IS SOME REMAINING TEXT AFTER LAST SEQUENTIAL BLOCK EMBEDDED WITHIN THIS BLOCK";
			info "MergeText.mid(TextCursor,ClosedDelimiterLocation + TextCursor) = " + MergeText.mid(TextCursor,ClosedDelimiterLocation + TextCursor);
			CurrentIndex = standalone.IncrementSequentialIndex(CurrentIndex).toList();
			ResultsMap.put(CurrentIndex.duplicate(0).toList(),MergeText.mid(TextCursor,ClosedDelimiterLocation + TextCursor));
			info ResultsMap;
		}
		ParentBlockKey = standalone.ParentBlockKey(ResultsMap).toList(",");
		info "ParentBlockKey: " + ParentBlockKey;
		BlockType = standalone.ParentBlockValue(ResultsMap);
		info "BlockType = " + BlockType;
		Indices = standalone.ParentSubIndices(ResultsMap).toList("|");
		info "Processing End Embedded Block. Indices = " + Indices;
		if(BlockType = "BLOCK")
		{
			ResultsMap.put(ParentBlockKey.duplicate().toList(),"");
			// iterate through concatenation of each sub block
			for each  x in Indices
			{
				// info x;
				// info "ResultsMap.get(x.toList()) = " + ResultsMap.get(x.toList());
				// concatenate at parent level and remove map
				ResultsMap.put(ParentBlockKey.toList(),ResultsMap.get(ParentBlockKey.toList()) + ResultsMap.get(x.toList()));
				ResultsMap.remove(x.toList());
			}
			// Reset CurrentIndex to "last item" which is now the parent
			CurrentIndex = ParentBlockKey;
		}
		TextCursor = TextCursor + ClosedDelimiterLocation + 1;
		LastDelimiterWasOpen = false;
	}
	// info "ResultsMap AFTER processing is: " + ResultsMap;
	// info "TextCursor AFTER processing is: " + TextCursor + " , End: " + End;
	if(TextCursor > End)
	{
		// we're done
		// info "!!! BREAKING ON TEXT CURSOR = " + TextCursor;
		break;
	}
}
ResultText = ResultsMap.get("[0]".toList());
if(ResultText == "BLOCK")
{
	ResultText = "{ERROR:\"001 MISMATCHED BRACKETS\"}";
}
info ResultText;
return standalone.EscapeSpecialCharacters(ResultText,OpenDelimiter + CloseDelimiter + FunctionCharacter);
}