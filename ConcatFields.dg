//String ConcatFields(sModule as string,							the name of the module to retrieve
		ID as int,									the ID of the record to be retrieved from sModule
		sFieldList as string,						see below
		sDelim as string="{,}",               		the delimiter when parsing sFieldList
		sLine as string="<br>",						the line break insert text
		sFinsert as String="{$}",					the formatting string to insert field data
		sNinsert as String="{_}"					the formatting string to insert field name data
		sLinsert as String="{nl}"					the formatting string to insert a line break
		bIgnoreBlanks as bool=TRUE					ignore formatting for a field that is blank = "" or null
		sBlanks as String="")
//default values
sDelim = if(ifNull(sDelim,"") == "","{,}",sDelim);
sLine = if(ifNull(sLine,"") == "","<br>",sLine);
sFinsert = if(ifNull(sFinsert,"") == "","{$}",sFinsert);
sNinsert = if(ifNull(sNinsert,"") == "","{_}",sNinsert);
sLinsert = if(ifNull(sLinsert,"") == "","{nl}",sLinsert);
sTSI = "{f$}";
sEndTSI = "{\f$}";
bIgnoreBlanks = ifNull(bIgnoreBlanks,TRUE);
sBlanks = ifNull(sBlanks,"");
//
lFlds = sFieldList.toList(sDelim);
r = zoho.crm.getRecordById(sModule,ID);

// s will collect our concatenation, t is for current operation, f is for the current field, n the current fieldname, bSkip is for blanks
s = "";
n = "";
sToStringFormat = "";
bSkip = false;
//loop to concatenate - there are two passes per field, first one is to Get Data
bGetData = true;
for each  fld in lFlds
{
	fStart = fld.find(sTSI);
	if(bGetData)
	{
		bIsATime=(left(fld,4)=="{dt}");
		n = if(bIsATime,fld.Right(len(fld)-4),fld);
		f = r.get(n);
		bSkip=(ifNull(f,"") == "");
		if(bSkip && !bIgnoreBlanks)
		{
			f = sBlanks;
		}
		bGetData = False;
	}
	else if(bSkip)
	{
		bGetData = True;
	}
	else if(fStart >= 0)
	{
		fEnd = fld.find(sEndTSI);
		sToStringFormat = fld.subString(fStart + sTSI.Length(),fEnd);
		sToStringAll = fld.substring(fStart,fEnd + sEndTSI.length());
		fld = fld.replaceAll(sLinsert,sLine,True);
		fld = fld.replaceAll(sNinsert,n,True);
		if(bIsATime)
		{
			fld = fld.replaceAll(sToStringAll,f.toTime("yyyy-MM-dd'T'HH:mm:ss").toString(sToStringFormat),true);
			bIsATime=false;
		}
		else 
        {
			fld = fld.replaceAll(sToStringAll,f.toString(sToStringFormat),true);
        }
		bGetData = True;
		s = s + fld;
	}
	else
	{
		if(fld = "")
		{
			fld = sNinsert + ": " + sFinsert + sLinsert;
			info "format null, changed to: " + fld;
		}
		fld = fld.replaceAll(sLinsert,sLine,True);
		fld = fld.replaceAll(sNinsert,n,True);
		fld = fld.replaceAll(sFinsert,f,True);
		bGetData = True;
		s = s + fld;
	}
}
return s;